shiny::runApp()
runApp()
# clear-up the environment
rm(list = ls())
# chunk options
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
options(scipen = 100)
knitr::include_graphics("assets/Interactive Plotting.png")
library(tidyverse)
library(ggpubr)
library(scales)
library(glue)
library(plotly)
library(lubridate)
# install.packages("dplyr")
library(dplyr)
vids <- read.csv("data_input/youtubetrends.csv", stringsAsFactors = T)
# dplyr
glimpse(vids)
# dplyr
vids_select1 <- select(.data = vids, trending_date, title)
# dplyr
select(.data = vids, -comments_disabled, -ratings_disabled, -video_error_or_removed)
# dplyr
filter(.data = vids,
category_id == "Gaming",
views > 1000000)
glimpse(vids)
# dplyr
mutate(.data = vids,
title = as.character(title))
# Pak Christoper
mutate(.data = vids,
title = as.character(title),
channel_title = as.character(channel_title))
# dplyr
vids_gaming <- vids %>%
select(-comments_disabled, -ratings_disabled, -video_error_or_removed) %>%
filter(category_id == "Gaming", views > 1000000)
vids %>%
filter(category_id == "Gaming", views > 1000000) %>%
select(-comments_disabled, -ratings_disabled, -video_error_or_removed, -category_id)
colSums(is.na(vids))
vids %>% is.na() %>% colSums()
vids %>% head()
# code here
vids %>%
filter(category_id == "Music") %>%
select(title, channel_title, timetotrend)
vids_clean <- vids %>%
# deselect kolom
select(-c(comments_disabled, ratings_disabled, video_error_or_removed)) %>%
mutate(
# mengubah tipe data
trending_date = ymd(trending_date),
publish_time = ymd_hms(publish_time),
title = as.character(title),
channel_title = as.character(channel_title),
# menambahkan kolom baru
likesp = likes/views,
dislikep = dislikes/views,
commentp = comment_count/views
)
head(vids_clean)
# base R
colSums(is.na(vids_clean))
# dplyr
vids_clean %>% is.na() %>% colSums()
# dplyr
vids_clean %>%
group_by(channel_title) %>%
summarise(mean_viewers = mean(views)) %>%
ungroup()
# Bu Namira
vids_clean %>% group_by(channel_title) %>%
summarise(mean_viewers = mean(views),
total_viewers = sum(views),
total_comment = sum(comment_count)) %>%
ungroup()
# code here
vids_clean %>%
group_by(channel_title, title) %>%
summarise(mean_views = mean(views)) %>%
ungroup() %>%
top_n(1)
vids_agg <- vids_clean %>%
filter(category_id=="Music") %>%
group_by(publish_when, publish_wday) %>%
summarise(average = mean(views)) %>%
ungroup()
# dplyr
vids_agg %>%
arrange(-average)
# Code here
vids_count <- vids_clean %>%
group_by(category_id) %>%
summarise(count= n()) %>%
ungroup() %>%
arrange(-count)
vids_count
# code here
vids_10 <- vids_clean %>%
filter(category_id == "Entertainment") %>%
group_by(channel_title) %>%
summarise(mean_viewers = mean(views)) %>%
ungroup() %>%
arrange(-mean_viewers) %>%
head(10)
vids_10
library(ggplot2) # pembuatan plot statis
library(plotly) # untuk plot interaktif
library(glue) # utk setting tooltip
library(scales)
# plot: ggplot2
plot1 <- ggplot(data = vids_count, aes(x = count,
y = reorder(category_id, count))) + # reorder(A, berdasarkan B)
geom_col(aes(fill = count)) +
scale_fill_gradient(low="red", high="black") +
labs(title = "Trending Categories of YouTube US 2017",
x = "Video Count",
y = NULL) +
theme_minimal() +
theme(legend.position = "none")
plot1
# interactive plot
ggplotly(plot1, tooltip = "x")
makanan <- c(5000, 7000, 2000)
glue("Harga makanan: {makanan} rupiah")
# menambahkan kolom berisi informasi tooltip
vids_count2 <- vids_count %>%
mutate(
label = glue(
"Category: {category_id}
Video count: {count}"
)
)
vids_count2
# buat ulang ggplot
plot1 <- ggplot(data = vids_count2, aes(x = count,
y = reorder(category_id, count),# reorder(A, berdasarkan B)
text = label)) + # untuk informasi tooltip
geom_col(aes(fill = count)) +
scale_fill_gradient(low="red", high="black") +
labs(title = "Trending Categories of YouTube US 2017",
x = "Video Count",
y = NULL) +
theme_minimal() +
theme(legend.position = "none")
plot1
# buat ulang plotly
ggplotly(plot1, tooltip = "text")
# data
vids_10 <- vids_10 %>%
mutate(
label = glue(
"Channel: {channel_title}
Average Views: {round(mean_viewers, 2)}"
)
)
# ggplot: lolipop plot
plot2 <- ggplot(vids_10, aes(x = reorder(channel_title, mean_viewers),
y = mean_viewers,
text = label)) +
geom_segment(aes(x=reorder(channel_title, mean_viewers), xend=reorder(channel_title, mean_viewers), y=0,yend=mean_viewers), color="red") +
geom_point(color="black") +
coord_flip() +
labs(title = "Top 10 Channel on Entertainment",
x = NULL,
y = "Average View") +
theme_minimal()
plot2
# ggplot: lolipop plot
plot2 <- ggplot(vids_10, aes(x = reorder(channel_title, mean_viewers),
y = round(mean_viewers, 2),
text = glue(
"Channel: {channel_title}
Average Views: {round(mean_viewers,2)}"
))) +
geom_segment(aes(x=reorder(channel_title, mean_viewers), xend=reorder(channel_title, mean_viewers), y=0,yend=mean_viewers), color="red") +
geom_point(color="black") +
coord_flip() +
labs(title = "Top 10 Channel on Entertainment",
x = NULL,
y = "Average View") +
theme_minimal()
plot2
# plotly
ggplotly(plot2, tooltip = "text")
# your code
vids_trend <- vids_clean %>%
filter(category_id == "Entertainment") %>%
group_by(publish_hour) %>%
summarise(avg_views = mean(views)) %>%
ungroup() %>%
mutate(label2 = glue(
"Publish Hour: {publish_hour}
Average Views: {comma(round(avg_views, 2))}"
))
vids_trend
# plot
plot3 <- ggplot(vids_trend, aes(x=publish_hour, y= avg_views))+
geom_line(col="red") +
geom_point(aes(text=label2), col="black") +
labs(
title = "Viewers Activity of Entertainment Videos",
x = "Publish Hours",
y = "Average Views"
) +
theme_minimal()
plot3
# buat plot menjadi interaktif dengan menambahkan tooltip
ggplotly(plot3, tooltip = "text")
library(ggpubr)
publicat <- ggarrange(plot1, plot2, plot3, ncol=1)
# print hal 1
publicat
ggexport(publicat, filename="assets/publication_inclass.pdf")
subplot(
plot1,
plot2,
plot3,
nrows=2)
vids %>% slice(20:30)
?str_detect
# akan mengembalikan nilai T/F
str_detect(vids$category_id, "and") %>% head(5)
# digabungkan dengan fungsi filter untuk mensubset pada data vids
filter(.data = vids, str_detect(vids$category_id, "and")) %>% head(5)
?case_when
case_when(vids$publish_hour <= 12 ~ "Day",
vids$publish_hour > 12 ~ "Night") %>% head(5)
# menerapkan pada data vids dan membuat kolom baru
vids %>%
mutate(dayornight = case_when(vids$publish_hour <= 12 ~ "Day",
vids$publish_hour > 12 ~ "Night")) %>% head(5)
library(tidyverse)
library(scales)
library(glue)
library(plotly)
library(lubridate)
vids <- read.csv("data_input/youtubetrends.csv", stringsAsFactors = T)
vids_clean <- vids %>%
# deselect kolom
select(-c(comments_disabled, ratings_disabled, video_error_or_removed)) %>%
mutate(
# mengubah tipe data
trending_date = ymd(trending_date),
publish_time = ymd_hms(publish_time),
title = as.character(title),
channel_title = as.character(channel_title),
# menambahkan kolom baru
likesp = likes/views,
dislikep = dislikes/views,
commentp = comment_count/views
)
vids_count <- vids_clean %>%
group_by(category_id) %>%
summarise(count= n()) %>%
ungroup() %>%
arrange(-count)
vids_count2 <- vids_count %>%
mutate(
label = glue(
"Category: {category_id}
Video count: {count}"
)
)
plot1 <- ggplot(data = vids_count2, aes(x = count,
y = reorder(category_id, count),# reorder(A, berdasarkan B)
text = label)) + # untuk informasi tooltip
geom_col(aes(fill = count)) +
scale_fill_gradient(low="red", high="black") +
labs(title = "Trending Categories of YouTube US 2017",
x = "Video Count",
y = NULL) +
theme_minimal() +
theme(legend.position = "none")
ggplotly(plot1, tooltip = "text")
vids_10 <- vids_clean %>%
filter(category_id == "Entertainment") %>%
group_by(channel_title) %>%
summarise(mean_viewers = mean(views)) %>%
ungroup() %>%
arrange(-mean_viewers) %>%
head(10)
vids_10 <- vids_10 %>%
mutate(
label = glue(
"Channel: {channel_title}
Average Views: {comma(round(mean_viewers, 2))}"
)
)
plot2 <- ggplot(vids_10, aes(x = reorder(channel_title, mean_viewers),
y = mean_viewers,
text = label)) +
geom_segment(aes(x=reorder(channel_title, mean_viewers), xend=reorder(channel_title, mean_viewers), y=0,yend=mean_viewers), color="red") +
geom_point(color="black") +
coord_flip() +
labs(title = "Top 10 Channel on Entertainment",
x = NULL,
y = "Average View") +
scale_y_continuous(labels = comma) +
theme_minimal()
ggplotly(plot2, tooltip = "text")
vids_trend <- vids_clean %>%
filter(category_id == "Entertainment") %>%
group_by(publish_hour) %>%
summarise(avg_views = mean(views)) %>%
ungroup() %>%
mutate(label2 = glue(
"Publish Hour: {publish_hour}
Average Views: {comma(round(avg_views, 2))}"
))
plot3 <- ggplot(vids_trend, aes(x=publish_hour, y= avg_views))+
geom_line(col="red") +
geom_point(aes(text=label2), col="black") +
labs(
title = "Viewers Activity of Entertainment Videos",
x = "Publish Hours",
y = "Average Views"
) +
scale_y_continuous(labels = comma) +
scale_x_continuous(breaks = seq(0,23,1)) +
theme_minimal()
ggplotly(plot3, tooltip = "text")
shiny::runApp()
install.packages("rsconnect")
shiny::runApp()
shiny::runApp()
